{"version":3,"sources":["webpack:///./js/task-01.js","webpack:///./js/task-02.js","webpack:///./js/task-02-second-version.js","webpack:///./js/task-03.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","table","all","makeTransaction","transaction","min","max","Math","floor","random","resolved","reject","id","logSuccess","logError","warn","amount","catch"],"mappings":"2JAQMA,EAAQ,SAAAC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,YAAW,kBAAMD,EAAQF,KAAKA,OAI5BI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCZXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,OAAO,IAAIb,SAAS,SAAAC,GAClBC,YAAW,WACT,IAAMY,EAAeF,EAASG,KAAI,SAAAC,GAAI,OACpCA,EAAKP,OAASI,EAAd,iBAA8BG,EAA9B,CAAoCN,QAASM,EAAKN,SAAWM,KAE/Df,EAAQa,KACP,SAIDX,EAAS,SAAAW,GAAY,OAAIT,QAAQY,MAAMH,IAM7CH,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,G,kCCzB7BK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,IAQMC,EAAeF,EAASG,KARX,SAAAC,GACjB,OAAO,IAAIhB,SAAQ,SAAAC,GACjBC,YAAW,WACTD,EAAQe,EAAKP,OAASI,EAAd,iBAA8BG,EAA9B,CAAoCN,QAASM,EAAKN,SAAWM,KACpE,WAKP,OAAOhB,QAAQkB,IAAIJ,IAGfX,EAAS,SAAAW,GAAY,OAAIT,QAAQY,MAAMH,IAM7CH,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GC3BnC,IAIMgB,EAAkB,SAACC,GACvB,IALiCC,EAAKC,EAKhCxB,GAL2BuB,EAKO,IALFC,EAKO,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAKpD,OAAO,IAAIrB,SAAQ,SAAC0B,EAAUC,GAC5BzB,YAAW,WACUqB,KAAKE,SAAW,GAEjCC,EAAS,CAACN,EAAYQ,GAAI9B,IAE1B6B,EAAOP,EAAYQ,MAEpB9B,OAID+B,EAAa,SAAC,GAAe,IAAdD,EAAc,KAAVxB,EAAU,KACjCC,QAAQC,IAAR,eAA2BsB,EAA3B,iBAA8CxB,EAA9C,OAEI0B,EAAW,SAAAF,GACfvB,QAAQ0B,KAAR,gCAA6CH,EAA7C,8BAOFT,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/BzB,KAAKsB,GACLI,MAAMH,GAETX,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/BzB,KAAKsB,GACLI,MAAMH,GAETX,EAAgB,CAAES,GAAI,GAAII,OAAQ,KAC/BzB,KAAKsB,GACLI,MAAMH,GAETX,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/BzB,KAAKsB,GACLI,MAAMH,K","file":"main.58cfad3e438dfeeb0af8.js","sourcesContent":["/*\r\nЗадание 1\r\nНапиши функцию delay(ms), которая возвращает промис, \r\nпереходящий в состояние \"resolved\" через ms миллисекунд. \r\nЗначением исполнившегося промиса должно быть то кол-во миллисекунд \r\nкоторое передали во время вызова функции delay.\r\n*/\r\n\r\nconst delay = ms => {\r\n  return new Promise(resolve => {\r\n    setTimeout(() => resolve(ms), ms);\r\n  });\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n","/*\r\nЗадание 2\r\nПерепиши функцию toggleUserState() так, \r\nчтобы она не использовала callback-функцию callback, \r\nа принимала всего два параметра allUsers и userName и возвращала промис.\r\n*/\r\n\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  return new Promise (resolve => {\r\n    setTimeout(() => {\r\n      const updatedUsers = allUsers.map(user =>\r\n        user.name === userName ? { ...user, active: !user.active } : user,\r\n      );\r\n      resolve(updatedUsers);\r\n    }, 500);\r\n  });\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n/*\r\n * Должно работать так\r\n */\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n\r\n\r\n","/*\r\nЗадание 2\r\nПерепиши функцию toggleUserState() так, \r\nчтобы она не использовала callback-функцию callback, \r\nа принимала всего два параметра allUsers и userName и возвращала промис.\r\n*/\r\n\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  const updateUser = user => {\r\n    return new Promise(resolve => {\r\n      setTimeout(() => {\r\n        resolve(user.name === userName ? { ...user, active: !user.active } : user);\r\n      }, 500);\r\n    });\r\n  };\r\n\r\n  const updatedUsers = allUsers.map(updateUser);\r\n  return Promise.all(updatedUsers);\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n/*\r\n * Должно работать так\r\n */\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n","/*\r\nЗадание 3\r\nПерепиши функцию makeTransaction() так, \r\nчтобы она не использовала callback-функции onSuccess и onError, \r\nа принимала всего один параметр transaction и возвращала промис.\r\n*/\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction) => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n  return new Promise((resolved, reject) => {\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n      if (canProcess) {\r\n        resolved([transaction.id, delay]);\r\n      } else {\r\n        reject(transaction.id);\r\n      }\r\n    }, delay);\r\n  });\r\n};\r\n\r\nconst logSuccess = ([id, time]) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n/*\r\n * Должно работать так\r\n */\r\n\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n"],"sourceRoot":""}